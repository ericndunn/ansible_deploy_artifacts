---
# tasks file for deployspa
# stultus probationem 

- name: "Remove {{ workspace_dir }}/war_urls.txt"
  file:
    state: absent
    path: "{{ item }}"
  with_items:
    - "{{ workspace_dir }}/war_urls.txt"
    - "{{ workspace_dir }}/wsr_page.txt"
  register: rm_war_urls
  delegate_to: localhost

- name: "DEBUG: Remove *.txt"
  debug:
    msg:
      - "{{ rm_war_urls }}"          

- name: "Get WSR Page"
  get_url: 
    url: "{{ confluence_source_url }}" 
    dest: "{{ workspace_dir }}/wsr_page.txt"
    force_basic_auth: yes 
    url_username: "{{ my_userid }}"
    url_password: "{{ my_password }}"
    validate_certs: no      
    mode: 0755
  run_once: true  
  delegate_to: localhost
  delegate_facts: True   
  register: wsr_results_get_url

- name: "DEBUG: Get WSR Page"
  debug:
    msg:
      - "Links from {{ wsr_results_get_url.url }}"
      - "were sent to {{ wsr_results_get_url.dest }}"
  run_once: true     

- name: "Parse WSR Page and create URLs file"
  shell: |
    /bin/cat "{{ workspace_dir }}/wsr_page.txt" | \
    grep -Eo "(http|https)://[a-zA-Z0-9./?=_-]*\.war" | \
    sort | uniq > "{{ workspace_dir }}/war_urls.txt"
  args:
    warn: no
  run_once: true  
  delegate_to: localhost
  delegate_facts: True          
  register: create_war_url_file

- name: "DEBUG: Parse WSR Page and create URLs file"  
  debug:
    msg: 
      - "Created {{ workspace_dir }}/war_urls.txt"
  run_once: true          

- name: "Cat war_urls.txt"
  shell: cat "{{ workspace_dir }}/war_urls.txt"
  failed_when: echo_war_urls_list.stdout ==""
  run_once: true
  delegate_to: localhost
  delegate_facts: True
  register: echo_war_urls_list

- name: "DEBUG: Cat war_urls.txt"  
  debug:
    msg: "{{ echo_war_urls_list.stdout.split('\n') }}"
  run_once: true  

- name: "Creates directory {{ build_tag_dir }}"
  file:
    path: "{{ build_tag_dir }}"
    state: directory
  run_once: true  
  delegate_to: localhost
  delegate_facts: True        

- name: "Get Release Files from Artifactory according to war_urls.txt"
  get_url: 
    url: "{{ item }}" 
    dest: "{{ build_tag_dir }}"
    force_basic_auth: yes 
    url_username: "{{ my_userid }}"
    url_password: "{{ my_password }}"
    validate_certs: no      
    mode: 0755
  with_items:
  - "{{ echo_war_urls_list.stdout_lines }}"
  run_once: true
  delegate_to: localhost
  delegate_facts: True   
  register: get_url_results

- name: "DEBUG: Get Release Files from Artifactory"
  debug:
    msg:
      - "Checksum of files from source:"
      - "{{ get_url_results.results | map(attribute='item') | list }}"
      - "{{ get_url_results.results | map(attribute='md5sum') | list }}"
  run_once: true

- name: "List WAS Artifact from URL"
  debug:
    msg: "{{ list_wars }}"
  run_once: true          

- name: "List *.war if exists on {{ workspace_dir }}"
  local_action: 
    module: find
    paths: "{{ build_tag_dir }}"
    patterns: "*.war"
    recurse: yes
  run_once: true  
  delegate_to: localhost
  delegate_facts: True  
  register: files_matched
- name: "DEBUG: List *.war if exists on {{ workspace_dir }}"  
  debug:
    msg: "{{ files_matched.files | map(attribute='path') | list }}"
  run_once: true  

- name: "Create file for versioning the WARS"
  file:
    path: "{{ item.path }}.txt"
    state: touch
  with_items: "{{ files_matched.files }}"
  run_once: true
  delegate_to: localhost
  delegate_facts: True
  register: create_version_files
- name: "DEBUG: Create file for versioning the WARS"  
  debug:
    msg: 
      - "{{ create_version_files.results | map(attribute='dest') | list }}"
  run_once: true                       

- name: Get the list of all file names inside the directory
  shell: "(cd {{ build_tag_dir }}; find . -maxdepth 1 -type f) | cut -d'/' -f2"
  register: files_to_rename
  changed_when: no
  delegate_to: localhost

- name: Rename the files (Here we use the copy technique)
  copy: 
    src: "{{ build_tag_dir }}/{{ item.1 }}"
    dest: "{{ build_tag_dir }}/{{ item.0 + 1 | basename | regex_replace(\\w+(?:-\\w+)*)-\\d+(?:\\.\\d+)*(?=\\.war\\b) }}"
    remote_src: yes
  with_indexed_items: "{{ files_to_rename.stdout_lines }}"
  delegate_to: localhost

# - name: Remove the source files that we have renamed
#   file:
#     path: "{{ build_tag_dir }}/{{ item }}"
#     state: absent
#   when: '"file-" not in item'
#   with_items: "{{ files_to_rename.stdout_lines }}"

# - name: "Deletes directory {{ deploy_war_dir }}"
#   file:
#     path: "{{ deploy_war_dir }}"
#     state: absent
#   register: delete_madt_dir
# - name: "DEBUG: Deletes directory {{ deploy_war_dir }}"  
#   debug:
#     msg: 
#       - "{{ delete_madt_dir }}" 
      
# - name: "Check directory /tmp/MADT2 exists."
#   stat:
#     path: /tmp/MADT2
#   register: madt_dir

# - name: "DEBUG: Check directory /tmp/MADT2 exists"
#   debug:
#     msg: "The directory /tmp/MADT2 exists"
#   when: madt_dir.stat.isdir is defined and madt_dir.stat.isdir
#   run_once: true    

# - name: "Creates directory {{ deploy_war_dir }}"
#   file:
#     path: "{{ deploy_war_dir }}"
#     state: directory
#     group: users
#     mode: 0775
#   register: create_madt_dir

# - name: "DEBUG: Creates directory {{ deploy_war_dir }}"  
#   debug:
#     msg: "{{ create_madt_dir.diff }}"

# - name: "Copy War and War-Versioning Files to {{ create_madt_dir.path }}"
#   copy:
#     src: "{{ item }}"
#     dest: "{{ deploy_war_dir }}"
#     group: users
#     mode: 0775
#   with_fileglob:
#   - "{{ build_tag_dir }}/*.war"
#   - "{{ build_tag_dir }}/*.txt"
#   register: put_war_release

# - name: dest from the first list, item returns from the second list
#   debug:
#     msg: "{{ item.0 }} : {{ item.1 }}"
#   with_together:
#     - "{{ put_war_release.results | map(attribute='dest') | list }}"
#     - "{{ put_war_release.results | map(attribute='item') | list }}"   

# - name: "Register local checksums"
#   stat:
#     path: "{{ item }}"
#     checksum_algorithm: sha1
#   delegate_to: localhost
#   with_fileglob: "{{ build_tag_dir }}/*.war"
#   register: local_files
# - name: "Check remote checksums comparing them to corresponding local"  
#   stat:
#     path: "{{ deploy_war_dir }}/{{ item.stat.path | basename }}"
#     checksum_algorithm: sha1
#   failed_when: remote_files.stat.checksum != item.stat.checksum
#   with_items: "{{ local_files.results }}"
#   register: remote_files
#   loop_control:
#     label: "{{ item.stat.path | basename }}"

# - name: "DEBUG: Register local checksums AND Check remote checksums comparing them to corresponding local"  
#   debug:
#     msg: 
#       - "{{ local_files.results | map(attribute='stat.path') | list }}"
#       - "{{ remote_files.results }}"                   

